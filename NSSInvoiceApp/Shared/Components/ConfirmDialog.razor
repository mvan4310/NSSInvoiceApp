@if (Visible)
{
    <MudOverlay Visible="true" DarkBackground="true" AutoClose="false">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">@Title</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudText>@Body</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButtonGroup OverrideStyles="false" Style="width:100%;">
                    <MudIconButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" Class="ml-auto" Style="width:50%;" Icon="@Icons.Filled.ArrowBack" OnClick="@CancelVerify"></MudIconButton>
                        <MudIconButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Success" Class="ml-auto" Style="width:50%;" OnClick="@OnItemConfirmed" Icon="@Icons.Filled.Check"></MudIconButton>
                </MudButtonGroup>

            </MudCardActions>
        </MudCard>
    </MudOverlay>
}

@code {
    [Parameter]
    public string Title { get; set; }

    [Parameter]
    public string Body { get; set; }

    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public EventCallback<bool> VisibleChanged { get; set; }

    [Parameter]
    public EventCallback OnConfirm { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        await InvokeAsync(StateHasChanged);
    }

    private async void CancelVerify()
    {
        await OnCancel.InvokeAsync();
    }

    private async void OnItemConfirmed()
    {
        await OnConfirm.InvokeAsync();
    }
}