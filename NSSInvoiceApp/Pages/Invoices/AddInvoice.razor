@page "/invoices/add"
@inject DataService dataService;
@inject ISnackbar snackbar
@inject NavigationManager navigationManager

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

@if (showDeleteItemVerify)
{
    <DeleteDialog Title="Delete Item?" Body="This action is not reversible." OnCancel="@CancelDeleteVerify" OnDelete="@OnItemDeleted" />
}

<EditInvoiceItemDialog @bind-Visible="@showEditInvoiceDialog" @bind-InvoiceItem="@existingItem" OnEdited="@OnItemEdited" OnDelete="@ShowDeleteItemVerify" OnCancel="@CancelItemDialog" />

<AddInvoiceItemDialog @bind-Visible="@showAddInvoiceDialog" @bind-InvoiceItem="@newItem" OnAdded="@OnItemAdded" OnCancel="@CancelItemDialog" />

<EditForm Model="@invoice" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />

    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardContent>
                    <MudNumericField @bind-Value="@invoice.InvoiceNumber" T="int" Label="Invoice Number" Margin="Margin.Dense" Variant="Variant.Outlined" HideSpinButtons="true" Step="1" />
                    <br />
                    <MudSelect T="string" Label="Customer" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter" @bind-Value="@invoice.Customer">
                        @foreach (var item in customers)
                        {
                            <MudSelectItem T="string" Value="@item.Name" />
                        }
                    </MudSelect>
                    <br />
                    <MudDatePicker Label="Date" Variant="Variant.Outlined" @bind-Value="@invoice.Date" />
                    <br />
                    <MudDatePicker Label="Due Date" Variant="Variant.Outlined" @bind-Value="@invoice.DueDate" />
                    <br />
                    <br />
                    <MudText Style="width:100%;" Typo="Typo.h6" Align="Align.Center">Invoice Items</MudText>
                    <br />
                    <MudDataGrid @ref="@grid" T="InvoiceItem" Items="@InvoiceItems" Breakpoint="Breakpoint.None" SelectedItemChanged="@SelectionChanged">
                        <Columns>
                            <Column T="InvoiceItem" Field="Description" />
                            <Column T="InvoiceItem" Field="Quantity" />
                            <Column T="InvoiceItem" Field="Price" Context="con">
                                <CellTemplate>
                                    <MudText>@con.Price.ToString("C")</MudText>
                                </CellTemplate>
                            </Column>
                            <Column T="InvoiceItem" Field="IsTax" />
                        </Columns>
                    </MudDataGrid>
                </MudCardContent>
                <MudCardActions>
                    <MudButtonGroup OverrideStyles="false" Style="width:100%;">
                        <MudIconButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" Class="ml-auto" Style="width:33%;" Icon="@Icons.Filled.ArrowBack" OnClick="@OnCancelClicked"></MudIconButton>
                        <MudIconButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Info" Class="ml-auto" Style="width:33%;" Icon="@Icons.Filled.Add" OnClick="@ShowItemDialog"></MudIconButton>
                        <MudIconButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success" Class="ml-auto" Style="width:33%;" Icon="@Icons.Filled.Save"></MudIconButton>
                    </MudButtonGroup>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    Invoice invoice = new Invoice() { Date = DateTime.Now, DueDate = DateTime.Now.AddDays(1) };
    List<InvoiceItem> InvoiceItems = new List<InvoiceItem>();
    List<Customer> customers = new List<Customer>();

    InvoiceItem newItem = new InvoiceItem();

    bool showAddInvoiceDialog = false;
    InvoiceItem existingItem = new InvoiceItem();
    MudDataGrid<InvoiceItem> grid;
    bool showEditInvoiceDialog = false;
    bool showDeleteItemVerify = false;

    protected override async Task OnParametersSetAsync()
    {
        dataService.UpdateTitle.Invoke("Add Invoice");
        invoice.InvoiceNumber = dataService.Instance.Invoices.Select(a => a.InvoiceNumber).DefaultIfEmpty(0).Max() + 1;
        customers = dataService.Instance.Customers.OrderBy(a => a.Name).ToList();
    }

    private void OnValidSubmit(EditContext context)
    {
        if (InvoiceItems.Count < 1)
        {
            snackbar.Add("Must have at least one item on the invoice to submit.", Severity.Error);
            return;
        }
        invoice.Id = dataService.Instance.Invoices.Select(a => a.Id).DefaultIfEmpty(0).Max() + 1;
        invoice.CustomerId = dataService.Instance.Customers.First(a => a.Name == invoice.Customer).Id;

        int newestId = dataService.Instance.InvoiceItems.Select(a => a.Id).DefaultIfEmpty(0).Max() + 1;
        foreach (var item in InvoiceItems)
        {
            item.InvoiceId = invoice.Id;
            item.Id = newestId;

            dataService.Instance.InvoiceItems.Add(item);

            newestId++;
        }

        dataService.Instance.Invoices.Add(invoice);
        dataService.SaveData();

        navigationManager.NavigateTo($"/invoices/view/{invoice.Id}");
        StateHasChanged();
    }

    private void ShowItemDialog()
    {
        showAddInvoiceDialog = true;
    }

    private void CancelItemDialog()
    {
        showAddInvoiceDialog = false;
        newItem = new();

        showEditInvoiceDialog = false;
        existingItem = new();
        grid.SelectedItem = null;
    }

    private void OnItemAdded()
    {
        newItem.TotalPrice = newItem.Price * newItem.Quantity;

        InvoiceItems.Add(newItem);
        showAddInvoiceDialog = false;
        newItem = new();

        invoice.TotalAmount = InvoiceItems.Select(a => a.TotalPrice).DefaultIfEmpty(0).Sum();

        StateHasChanged();
    }

    private void OnItemEdited()
    {
        existingItem.TotalPrice = existingItem.Price * existingItem.Quantity;

        showEditInvoiceDialog = false;
        existingItem = new();

        invoice.TotalAmount = InvoiceItems.Select(a => a.TotalPrice).DefaultIfEmpty(0).Sum();
        dataService.SaveData();
        StateHasChanged();
    }

    private void OnItemDeleted()
    {
        dataService.Instance.InvoiceItems.Remove(existingItem);
        InvoiceItems.Remove(existingItem);

        showEditInvoiceDialog = false;
        showDeleteItemVerify = false;
        existingItem = new();
        grid.SelectedItem = null;

        invoice.TotalAmount = InvoiceItems.Select(a => a.TotalPrice).DefaultIfEmpty(0).Sum();
        dataService.SaveData();
        StateHasChanged();
    }

    private void ShowDeleteItemVerify()
    {
        showDeleteItemVerify = true;
        showEditInvoiceDialog = false;
        StateHasChanged();
    }

    private void OnItemTapped(InvoiceItem item)
    {
        showEditInvoiceDialog = true;
        existingItem = item;
        StateHasChanged();
    }

    void SelectionChanged(InvoiceItem args)
    {
        if (grid.SelectedItem != null)
        {
            OnItemTapped(args);
        }
    }

    private void CancelDeleteVerify()
    {
        showDeleteItemVerify = false;

        existingItem = new();
        grid.SelectedItem = null;
        StateHasChanged();
    }

    private void OnCancelClicked()
    {
        navigationManager.NavigateTo($"/invoices/");
    }
}