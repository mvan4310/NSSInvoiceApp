@page "/invoices/"
@inject DataService dataService;
@inject ISnackbar snackbar
@inject NavigationManager navigationManager

<br />

<MudPaper >
    <MudDataGrid @ref="@grid" MultiSelection="false" Breakpoint="Breakpoint.None" Items="@invoices" T="Invoice" Sortable="true" Filterable="true" SelectedItemChanged="@SelectionChanged" >
        <ToolBarContent>
            <MudTextField @bind-Value="_searchString" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <Columns>
            <Column T="Invoice" Field="Date" Context="con">
                <CellTemplate>
                    <MudText>@con.Date.ToShortDateString()</MudText>
                </CellTemplate>
            </Column>
            <Column T="Invoice" Field="Customer" />
            <Column T="Invoice" Field="TotalAmount" Title="Amount" />
            <Column T="Invoice" Field="ReceivedPayment" Title="Paid?" CellStyleFunc="@_cellStyleFunc" />
        </Columns>
        <PagerContent>
            <MudDataGridPager T="Invoice" />
        </PagerContent>
    </MudDataGrid>
</MudPaper>

@code {
    List<Invoice> invoices = new();
    MudDataGrid<Invoice> grid;
    bool IsLoading = true;
    private string _searchString;

    protected override async Task OnParametersSetAsync()
    {
        dataService.UpdateTitle.Invoke("Invoices");

        try
        {
            await Task.Run(() => LoadPageDetails().ConfigureAwait(false));
        }
        catch (Exception ex)
        {
            if (ex.InnerException != null)
            {
                snackbar.Add(ex.InnerException.Message, Severity.Error);
            }
            else
            {
                snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }

    async Task LoadPageDetails()
    {
        if (IsLoading)
        {
            IsLoading = true;
            invoices = dataService.Instance.Invoices.ToList();

            await InvokeAsync(StateHasChanged);

            IsLoading = false;
        }

    }

    void SelectionChanged(Invoice args)
    {
        if (grid.SelectedItem != null)
        {
            navigationManager.NavigateTo($"/invoices/view/{grid.SelectedItem.Id}");
        }
    }

    private Func<Invoice, string> _cellStyleFunc => x =>
    {
        string style = "";

        if (!x.ReceivedPayment)
            style += "background-color:#880E4F";        return style;
    };
}