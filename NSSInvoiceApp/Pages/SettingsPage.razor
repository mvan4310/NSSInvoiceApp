@page "/settings"

@inject DataService dataService;
@inject ISnackbar Snackbar
@inject NavigationManager navigationManager
@inject IDialogService dialogService
@using System.Text.Json

<MudLayout>
    <MudList Clickable="true">
        <MudSwitch Checked="@dataService.Instance.EnableDarkMode" Label="Enable Dark Mode" Color="Color.Primary" T="bool" CheckedChanged="@DarkModeChanged" />
        <br />
        <br />
        <MudButton Color="Color.Primary" Variant="Variant.Outlined" Class="ml-auto" Style="width:100%;" OnClick="@OnDetailsClicked">Edit Company Details</MudButton>
        <br />
        <MudListItem Text="Backup Saved Data" Disabled="false" Icon="@Icons.Material.Filled.Save" OnClick="OnExport" />
        <br />
        <MudListItem Text="Import Saved Data" Disabled="true" Icon="@Icons.Material.Filled.ImportExport"  />
    </MudList>
</MudLayout>

@code {

    protected override async Task OnParametersSetAsync()
    {
        dataService.UpdateTitle.Invoke("Settings");
        StateHasChanged();
    }

    private void DarkModeChanged(bool value)
    {
        dataService.Instance.LastUpdated = DateTime.Now.ToString();
        dataService.Instance.EnableDarkMode = value;
        
        dataService.SaveData();
        StateHasChanged();

        //We do this twice so we can get the new theme to show without the user having to do something. Maybe I can find a better way later, but this works
        dataService.ToggleSidebar.Invoke();
        dataService.ToggleSidebar.Invoke();
    }

    private void OnDetailsClicked()
    {
        navigationManager.NavigateTo($"/settings/company/");
    }

    private void OnExport()
    {
        string rootPath = Path.Combine(Android.OS.Environment.ExternalStorageDirectory.AbsolutePath, Android.OS.Environment.DirectoryDownloads);
        string savePath = Path.Combine(rootPath, "data.json");
        try
        {
            var _data = JsonSerializer.Serialize(dataService.Instance);
            File.CreateText(savePath).Dispose();
            using (TextWriter writer = new StreamWriter(savePath, false))
            {
                    writer.WriteLine(_data);
                    writer.Close();
            }
            Snackbar.Add("Exported to Downloads Folder Successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            if (ex.InnerException != null)
            {
                Snackbar.Add(ex.InnerException.Message, Severity.Error);
            }
            else
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }

    public class ThemeDetails
    {
        public string ID { get; set; }
        public string Text { get; set; }
    }

    private List<ThemeDetails> Themes = new List<ThemeDetails>() {
        new ThemeDetails(){ ID = "material", Text = "Material" },
        new ThemeDetails(){ ID = "material-dark", Text = "Material Dark" },
    };
}
