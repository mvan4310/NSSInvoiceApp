@page "/settings"

@inject DataService dataService;
@inject ISnackbar Snackbar
@inject NavigationManager navigationManager
@inject IDialogService dialogService
@using System.Text.Json

<ConfirmDialog @bind-Visible="@showConfirmExport" Title="Backup Data?" Body="Are you sure you want to make a backup to the Downloads folder?" OnConfirm="OnExport" OnCancel="CancelExportVerify" />
<ConfirmDialog @bind-Visible="@showConfirmImport" Title="Restore Data?" Body="Restore data from data.json in Downloads Folder? This will overwrite ALL data. Any data newer than backup will be lost." OnConfirm="OnImport" OnCancel="CancelImportVerify" />

<MudLayout>
    <MudList Clickable="true">
        @if (dataService.Instance.EnableDarkMode)
        {
            <MudListItem Text="Enable Dark Mode" Disabled="false" Icon="@Icons.Material.Filled.CheckBox" IconColor="Color.Primary" OnClick="@DarkModeChanged" />
        }
        else
        {
            <MudListItem Text="Enable Dark Mode" Disabled="false" Icon="@Icons.Material.Outlined.CheckBoxOutlineBlank" IconColor="Color.Primary" OnClick="@DarkModeChanged" />
        }
        <MudDivider />
        <MudListItem Text="Edit Company Details" Disabled="false" Icon="@Icons.Material.Filled.Business" OnClick="@OnDetailsClicked" />
        <MudDivider />
        <MudListItem Text="Backup Saved Data" Disabled="false" Icon="@Icons.Material.Filled.Backup" OnClick="ShowExportVerify" />
        <MudDivider />
        <MudListItem Text="Restore Saved Data" Disabled="false" Icon="@Icons.Material.Filled.Restore" OnClick="ShowImportVerify" />
    </MudList>
</MudLayout>

@code {
    bool showConfirmExport = false;
    bool showConfirmImport = false;

    protected override async Task OnParametersSetAsync()
    {
        dataService.UpdateTitle.Invoke("Settings");
        StateHasChanged();
    }

    private void DarkModeChanged()
    {
        dataService.Instance.EnableDarkMode = !dataService.Instance.EnableDarkMode;

        dataService.SaveData();
        StateHasChanged();

        //We do this twice so we can get the new theme to show without the user having to do something. Maybe I can find a better way later, but this works
        dataService.ToggleSidebar.Invoke();
        dataService.ToggleSidebar.Invoke();
    }

    private void OnDetailsClicked()
    {
        navigationManager.NavigateTo($"/settings/company/");
    }

    private void CancelExportVerify()
    {
        showConfirmExport = false;
        StateHasChanged();
    }

    private void ShowExportVerify()
    {
        showConfirmExport = true;
        StateHasChanged();
    }

    private void CancelImportVerify()
    {
        showConfirmImport = false;
        StateHasChanged();
    }

    private void ShowImportVerify()
    {
        showConfirmImport = true;
        StateHasChanged();
    }

    private async void OnImport()
    {
        showConfirmImport = false;

        try
        {
            var options = new PickOptions
                {
                    PickerTitle = "Please choose backup file"
                };
            var file = await ChooseRestoreFile(options);

            //return so we dont get an error in the snackbar if the file is null due to them cancelling
            if (file == null)
            {
                return;
            }

            using (TextReader reader = new StreamReader(await file.OpenReadAsync()))
            {
                string _data = reader.ReadToEnd();
                reader.Close();

                var _loadedData = JsonSerializer.Deserialize<UserData>(_data);
                dataService.Instance = _loadedData;
                dataService.SaveData();
                Snackbar.Add("Restore Successfully", Severity.Success);
            }
        }
        catch (Exception ex)
        {
            if (ex.InnerException != null)
            {
                Snackbar.Add(ex.InnerException.Message, Severity.Error);
            }
            else
            {
                Snackbar.Add(ex.Message, Severity.Error);
            }
        }
        StateHasChanged();
    }

    async Task<FileResult> ChooseRestoreFile(PickOptions options)
    {
        try
        {
            var result = await FilePicker.PickAsync(options);

            return result;
        }
        catch (Exception ex)
        {
            // The user canceled or something went wrong
        }
        return null;
    }

    // TODO Refactor this...
    private async void OnExport()
    {
        showConfirmExport = false;

        var status = await Permissions.RequestAsync<Permissions.StorageRead>();
        if (status == PermissionStatus.Granted)
        {
            status = await Permissions.RequestAsync<Permissions.StorageWrite>();
            if (status == PermissionStatus.Granted)
            {
                string savePath = Path.Combine(FileSystem.CacheDirectory, "invoiseebackup.json");
                try
                {
                    var _data = JsonSerializer.Serialize(dataService.Instance);
                    int backupNum = 1;
                    if (File.Exists(savePath))
                    {
                        while (File.Exists(savePath) && backupNum < 50)
                        {
                            savePath = Path.Combine(FileSystem.CacheDirectory, "invoiseebackup" + backupNum + ".json");
                            backupNum++;
                        }

                        File.CreateText(savePath).Dispose();
                        using (TextWriter writer = new StreamWriter(savePath, false))
                        {
                            writer.WriteLine(_data);
                            writer.Close();
                        }

                        await Share.RequestAsync(new ShareFileRequest
                            {
                                Title = "Backup Data",
                                File = new ShareFile(savePath)
                            });

                        //Snackbar.Add("Exported Successfully", Severity.Success);
                    }
                    else
                    {
                        File.CreateText(savePath).Dispose();
                        using (TextWriter writer = new StreamWriter(savePath, false))
                        {
                            writer.WriteLine(_data);
                            writer.Close();
                        }

                        await Share.RequestAsync(new ShareFileRequest
                            {
                                Title = "Backup Data",
                                File = new ShareFile(savePath)
                            });

                        //Snackbar.Add("Exported Successfully", Severity.Success);
                    }
                }
                catch (Exception ex)
                {
                    if (ex.InnerException != null)
                    {
                        Snackbar.Add(ex.InnerException.Message, Severity.Error);
                    }
                    else
                    {
                        Snackbar.Add(ex.Message, Severity.Error);
                    }
                }
            }
        }
        StateHasChanged();
    }

    public async Task<PermissionStatus> CheckAndRequestStoragePermission()
    {
        var status = await Permissions.CheckStatusAsync<Permissions.StorageWrite>();
        if (status == PermissionStatus.Granted)
            return status;
        if (status == PermissionStatus.Denied && DeviceInfo.Platform == DevicePlatform.iOS)
        {
            // Prompt the user to turn on in settings
            // On iOS once a permission has been denied it may not be requested again from the application
            return status;
        }
        if (Permissions.ShouldShowRationale<Permissions.StorageWrite>())
        {
            // Prompt the user with additional information as to why the permission is needed
        }
        status = await Permissions.RequestAsync<Permissions.StorageWrite>();

        return status;
    }

    public async Task<PermissionStatus> CheckAndRequestStorageReadPermission()
    {
        var status = await Permissions.CheckStatusAsync<Permissions.StorageRead>();
        if (status == PermissionStatus.Granted)
            return status;
        if (status == PermissionStatus.Denied && DeviceInfo.Platform == DevicePlatform.iOS)
        {
            // Prompt the user to turn on in settings
            // On iOS once a permission has been denied it may not be requested again from the application
            return status;
        }
        if (Permissions.ShouldShowRationale<Permissions.StorageRead>())
        {
            // Prompt the user with additional information as to why the permission is needed
        }
        status = await Permissions.RequestAsync<Permissions.StorageRead>();

        return status;
    }
}