@page "/"
@inject DataService dataService;
@inject ISnackbar snackbar
@inject NavigationManager navigationManager

<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Activity This Month</MudText>
        </CardHeaderContent>
    </MudCardHeader>
    <MudCardContent>
        <MudChart ChartType="ChartType.Donut" InputData="@chartValues" @bind-SelectedIndex="selectedIndex" InputLabels="@labels" Width="100%" Height="350px">
            <CustomGraphics>
                <text class="donut-inner-text" x="47%" y="35%" dominant-baseline="middle" text-anchor="middle" fill="@((dataService.Instance.EnableDarkMode) ? "white" : "black")" font-family="Helvetica" font-size="2">Total</text>
                <text class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle" text-anchor="middle" fill="@((dataService.Instance.EnableDarkMode) ? "white" : "black")" font-family="Helvetica" font-size="5">@_chartTotal</text>
            </CustomGraphics>
        </MudChart>
    </MudCardContent>
</MudCard>

<br />
<MudPaper>
    <MudDataGrid @ref="@gridInvoice" MultiSelection="false" Breakpoint="Breakpoint.None" T="Invoice" Items="@invoices" Sortable="true" Filterable="true" SelectedItemChanged="@InvoiceSelectionChanged">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Last 5 Invoices</MudText>
        </ToolBarContent>
        <Columns>
            <Column T="Invoice" Field="Date" Context="con" >
                <CellTemplate>
                    <MudText>@con.Date.ToShortDateString()</MudText>
                </CellTemplate>
            </Column>
            <Column T="Invoice" Field="Customer" />
            <Column T="Invoice" Field="TotalAmount" Title="Amount" />
            <Column T="Invoice" Field="ReceivedPayment" Title="Paid?" CellStyleFunc="@_cellStyleFunc" />
        </Columns>
    </MudDataGrid>
</MudPaper>

<br />
<MudPaper>
    <MudDataGrid @ref="@gridExpense" MultiSelection="false" T="Expense" Breakpoint="Breakpoint.None" Items="@expenses" Sortable="true" Filterable="true" SelectedItemChanged="@ExpenseSelectionChanged">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Last 5 Expenses</MudText>
        </ToolBarContent>
        <Columns>
            <Column T="Expense" Field="Date" Context="con" >
                <CellTemplate>
                    <MudText>@con.Date.ToShortDateString()</MudText>
                </CellTemplate>
            </Column>
            <Column T="Expense" Field="Name" Title="Description" />
            <Column T="Expense" Field="TotalAmount" Title="Amount" />
        </Columns>
    </MudDataGrid>
</MudPaper>

@code {
    //Ideally, we should add a chart at the top, with two list below. One for invoices, another for expenses
    public string[] labels = { "Invoices", "Expenses" };
    public int selectedIndex = -1;
    double[] chartValues = new double[2];
    private bool IsLoading = true;
    private List<Invoice> invoices = new List<Invoice>();
    private List<Expense> expenses = new List<Expense>();
    private string _searchString;
    private string _chartTotal = "$0.00";

    MudDataGrid<Invoice> gridInvoice;
    MudDataGrid<Expense> gridExpense;

    protected override async Task OnParametersSetAsync()
    {
        dataService.UpdateTitle.Invoke("Home");
        StateHasChanged();
        try
        {
            await Task.Run(() => LoadPageDetails().ConfigureAwait(false));
        }
        catch (Exception ex)
        {
            if (ex.InnerException != null)
            {
                snackbar.Add(ex.InnerException.Message, Severity.Error);
            }
            else
            {
                snackbar.Add(ex.Message, Severity.Error);
            }
        }
    }

    async Task LoadPageDetails()
    {
        if (IsLoading)
        {
            IsLoading = true;            IsLoading = false;
        }
        var _data = dataService.Instance.Invoices.Where(a => a.Date.Month == DateTime.Now.Month).Select(a => a.TotalAmount).DefaultIfEmpty(0).Sum();
        var _expenses = dataService.Instance.Expenses.Where(a => a.Date.Month == DateTime.Now.Month).Select(a => a.TotalAmount).DefaultIfEmpty(0).Sum();
        expenses = dataService.Instance.Expenses.Where(a => a.Date > DateTime.Now.AddDays(-30)).OrderByDescending(a => a.Date).Take(5).ToList();
        invoices = dataService.Instance.Invoices.Where(a => a.Date > DateTime.Now.AddDays(-30)).OrderByDescending(a => a.Date).Take(5).ToList();
        chartValues[0] = _data;
        chartValues[1] = _expenses;
        _chartTotal = (_data - _expenses).ToString("C");
        await InvokeAsync(StateHasChanged);
    }

    private Func<Invoice, string> _cellStyleFunc => x =>
    {
        string style = "";

        if (!x.ReceivedPayment)
            style += "background-color:#880E4F"; return style;
    };

    void InvoiceSelectionChanged(Invoice args)
    {
        if (gridInvoice.SelectedItem != null)
        {
            OnInvoiceTapped(args);
        }
    }

    private void OnInvoiceTapped(Invoice item)
    {
        navigationManager.NavigateTo($"/invoices/view/{item.Id}");
        StateHasChanged();
    }

    void ExpenseSelectionChanged(Expense args)
    {
        if (gridExpense.SelectedItem != null)
        {
            OnExpenseTapped(args);
        }
    }

    private void OnExpenseTapped(Expense item)
    {
        navigationManager.NavigateTo($"/expenses/view/{item.Id}");
        StateHasChanged();
    }
}