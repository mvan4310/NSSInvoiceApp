@page "/expenses/edit/{ID:int}"
@inject DataService dataService;
@inject ISnackbar snackbar
@inject NavigationManager navigationManager

@if (showDeleteVerify)
{
    <DeleteDialog Title="Delete Expense?" Body="This action is not reversible. Do not do this if you need the data." OnCancel="@CancelDeleteVerify" OnDelete="@OnDeleteExpense" />
}

<EditForm Model="@expense" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <MudGrid>
        <MudItem xs="12" sm="12">
            <MudCard>
                <MudCardContent>
                    <MudTextField @bind-Value="@expense.Name" Label="Description" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    <br />
                    <MudTextField @bind-Value="@expense.TotalAmount" T="double" Label="Amount" Variant="Variant.Outlined" Margin="Margin.Dense" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.AttachMoney" />
                    <br />
                    <MudDatePicker Label="Date" Variant="Variant.Outlined" @bind-Value="@expense.Date" Date="@expense.Date" />
                </MudCardContent>
                <MudCardActions>
                    <MudButtonGroup OverrideStyles="false" Style="width:100%;">
                        <MudIconButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" Class="ml-auto" Style="width:33%;" Icon="@Icons.Filled.ArrowBack" OnClick="@OnCancelClicked"></MudIconButton>
                        <MudIconButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Dark" Class="ml-auto" Style="width:33%;" Icon="@Icons.Filled.Delete" OnClick="@ShowDeleteVerify" />
                        <MudIconButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Success" Class="ml-auto" Style="width:33%;" Icon="@Icons.Filled.Save"></MudIconButton>
                    </MudButtonGroup>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [Parameter]
    public int ID { get; set; }

    Expense expense = new Expense() { Date = DateTime.Now };
    bool showDeleteVerify = false;

    protected override async Task OnParametersSetAsync()
    {
        dataService.UpdateTitle.Invoke("Edit Expense");
        expense = dataService.Instance.Expenses.FirstOrDefault(a => a.Id == ID).CloneExpense();
    }

    private void OnValidSubmit(EditContext context)
    {
        var _expense = dataService.Instance.Expenses.FirstOrDefault(a => a.Id == ID);
        _expense.Date = expense.Date;
        _expense.Name = expense.Name;
        _expense.TotalAmount = expense.TotalAmount;

        dataService.SaveData();

        navigationManager.NavigateTo($"/expenses/view/{expense.Id}");
        StateHasChanged();
    }

    private void ShowDeleteVerify()
    {
        showDeleteVerify = true;
    }

    private void CancelDeleteVerify()
    {
        showDeleteVerify = false;
    }

    private void OnDeleteExpense()
    {
        dataService.Instance.Expenses.Remove(expense);

        expense = new();

        dataService.SaveData();

        navigationManager.NavigateTo($"/expenses/");

        StateHasChanged();
    }

    private void OnCancelClicked()
    {
        navigationManager.NavigateTo($"/expenses/view/{expense.Id}");
    }
}