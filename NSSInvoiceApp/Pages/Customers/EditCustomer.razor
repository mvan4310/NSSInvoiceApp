@page "/customers/edit/{ID:int}"
@inject DataService dataService;
@inject ISnackbar snackbar
@inject NavigationManager navigationManager

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

@if (showDeleteVerify)
{
    <MudOverlay Visible="true" DarkBackground="true" AutoClose="false">
        <MudCard>
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h6">Delete Customer?</MudText>
                </CardHeaderContent>
            </MudCardHeader>
            <MudCardContent>
                <MudText >This will remove all related invoices as well. This action is not reversible. Do not do this if you need the invoice data.</MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@CancelDeleteVerify">Cancel</MudButton>
                <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" OnClick="@OnDeleteCustomer" Class="ml-auto">Delete</MudButton>
            </MudCardActions>
        </MudCard>
    </MudOverlay>
}

<EditForm Model="@customer" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />

    <MudGrid>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField @bind-Value="@customer.Name" Label="Name" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    <br />
                    <MudTextField @bind-Value="@customer.Address" Label="Address" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    <br />
                    <MudTextField @bind-Value="@customer.CityState" Label="City, State" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    <br />
                    <MudTextField @bind-Value="@customer.Zip" Label="Zip Code" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    <br />
                    <MudTextField @bind-Value="@customer.Email" Label="Email" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                    <br />
                    <MudTextField @bind-Value="@customer.Phone" Label="Phone Number" Variant="Variant.Outlined" Margin="Margin.Dense"></MudTextField>
                </MudCardContent>
                <MudCardActions>
                    <MudIconButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" Class="ml-auto" Icon="@Icons.Filled.Delete" OnClick="@ShowDeleteVerify" />
                    <MudButton ButtonType="ButtonType.Button" Variant="Variant.Filled" Color="Color.Secondary" Class="ml-auto" OnClick="@OnCancelClicked">Cancel</MudButton>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Save Customer</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    [Parameter]
    public int ID { get; set; }

    Customer customer = new Customer() { Date = DateTime.Now };
    bool showDeleteVerify = false;

    protected override async Task OnParametersSetAsync()
    {
        dataService.Title = "Edit Customer";
        customer = dataService.Instance.Customers.FirstOrDefault(a => a.Id == ID);
    }

    private void OnValidSubmit(EditContext context)
    {
        var _customer = dataService.Instance.Customers.FirstOrDefault(a => a.Id == ID);
        _customer.Name = customer.Name;
        _customer.Address = customer.Address;
        _customer.CityState = customer.CityState;
        _customer.Zip = customer.Zip;
        _customer.Email = customer.Email;
        _customer.Phone = customer.Phone;

        dataService.SaveData();

        navigationManager.NavigateTo($"/customers/view/{customer.Id}");
        StateHasChanged();
    }

    private void ShowDeleteVerify()
    {
        showDeleteVerify = true;
    }

    private void CancelDeleteVerify()
    {
        showDeleteVerify = false;
    }

    private void OnDeleteCustomer()
    {
        foreach (var item in dataService.Instance.Invoices.Where(a => a.CustomerId == customer.Id).ToList())
        {
            dataService.Instance.Invoices.Remove(item);
        }
        dataService.Instance.Customers.Remove(customer);

        customer = new();

        dataService.SaveData();

        navigationManager.NavigateTo($"/customers/");

        StateHasChanged();
    }

    private void OnCancelClicked()
    {
        navigationManager.NavigateTo($"/customers/");
    }
}